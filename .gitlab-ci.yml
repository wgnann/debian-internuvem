---
stages:
  - source test
  - build
  - vendor upload
  - upload

variables:
  CLOUD_IMAGE_BUILD_ID: ${CI_PROJECT_NAMESPACE}-${CI_COMMIT_REF_SLUG}
  GIT_DEPTH: "1"

before_script:
  - apt-get update
  - apt-get install --no-install-recommends -y python3-libcloud python3-marshmallow python3-yaml qemu-utils
  - |
    if [ "$CI_DISPOSABLE_ENVIRONMENT" ]; then
      # Workaround unsupported SEEK_HOLE in overlayfs (Docker default)
      mount -t tmpfs none /tmp
    fi

test flake8:
  stage: source test
  image: debian:buster
  script:
    - >
      apt-get install --no-install-recommends -y
      python3-flake8
    - python3 -m flake8

test mypy:
  stage: source test
  image: debian:bullseye
  script:
    - >
      apt-get install --no-install-recommends -y
      mypy
    - mypy src
  allow_failure: true

test package:
  stage: source test
  image: debian:buster
  script:
    - apt-get build-dep -y ./
    - >
      apt-get install --no-install-recommends -y
      lintian
    - DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -us -uc
    - lintian ../*.changes

test pytest:
  stage: source test
  image: debian:buster
  script:
    - >
      apt-get install --no-install-recommends -y
      python3-pytest python3-pytest-cov
    - >
      PYTHONPATH=src
      py.test-3
      -vrxXs
      --color=yes
      --cov=src --cov-report=term --cov-report=html:coverage
      --junit-xml=junit.xml
      tests
  artifacts:
    paths:
      - coverage/
    reports:
      junit: junit.xml

test pytest latest:
  stage: source test
  image: python:slim
  before_script:
    - pip install -e .
  script:
    - python3 ./setup.py pytest

.build:
  stage: build
  image: debian:buster
  script:
    - >
      apt-get install --no-install-recommends -y
      binfmt-support ca-certificates debsums dosfstools fai-server fai-setup-storage make python3-pytest qemu-user-static qemu-utils sudo udev
    - |
      if [ "$CI_DISPOSABLE_ENVIRONMENT" ]; then
        # Some of our build environments run with SELinux enabled, make sure it is detected by all the tools
        if [ -d /sys/fs/selinux ]; then mount -t selinuxfs none /sys/fs/selinux; mkdir -p /etc/selinux; touch /etc/selinux/config; fi
      fi
    - >
      echo
      debian-cloud-images build
      --build-id ${CLOUD_IMAGE_BUILD_ID}
      --build-type dev
      --version ${CI_PIPELINE_IID}
      ${CLOUD_RELEASE} ${CLOUD_VENDOR} ${CLOUD_ARCH}
    - >
      ./bin/debian-cloud-images build
      --build-id ${CLOUD_IMAGE_BUILD_ID}
      --build-type dev
      ${CLOUD_RELEASE} ${CLOUD_VENDOR} ${CLOUD_ARCH}
    - 'xz -vk5T0 *.tar'
  artifacts:
    name: debian-${CLOUD_RELEASE}-${CLOUD_VENDOR}-${CLOUD_ARCH}
    expire_in: 7 days
    paths:
      - '*.build.json'
      - '*.info'
      - '*.tar.xz'
    reports:
      junit: '*.build.junit.xml'
  allow_failure: true

####
# Builds for developer uploads pushes
#
# Builds are run if
# - it is requested by setting $BUILD_AZURE, $BUILD_EC2, $BUILD_GCE, $BUILD_GENERIC or $BUILD_NOCLOUD or
# - the manual jobs are started.
####

.azure build:
  extends: .build
  rules:
  - if: '$CI_MERGE_REQUEST_ID == null && $BUILD_AZURE'
    when: on_success
  - if: '$CI_MERGE_REQUEST_ID == null'
    when: manual

azure stretch build:
  extends: .azure build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: stretch
    CLOUD_VENDOR: azure

azure stretch-backports build:
  extends: .azure build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: stretch-backports
    CLOUD_VENDOR: azure

azure buster build:
  extends: .azure build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: buster
    CLOUD_VENDOR: azure

azure buster-backports build:
  extends: .azure build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: buster-backports
    CLOUD_VENDOR: azure

azure bullseye build:
  extends: .azure build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: bullseye
    CLOUD_VENDOR: azure

azure sid build:
  extends: .azure build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: sid
    CLOUD_VENDOR: azure

.ec2 build:
  extends: .build
  rules:
  - if: '$CI_MERGE_REQUEST_ID == null && $BUILD_EC2'
    when: on_success
  - if: '$CI_MERGE_REQUEST_ID == null'
    when: manual

ec2 stretch amd64 build:
  extends: .ec2 build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: stretch
    CLOUD_VENDOR: ec2

ec2 buster amd64 build:
  extends: .ec2 build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: buster
    CLOUD_VENDOR: ec2

ec2 bullseye amd64 build:
  extends: .ec2 build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: bullseye
    CLOUD_VENDOR: ec2

ec2 sid amd64 build:
  extends: .ec2 build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: sid
    CLOUD_VENDOR: ec2

ec2 stretch arm64 build:
  extends: .ec2 build
  variables:
    CLOUD_ARCH: arm64
    CLOUD_RELEASE: stretch
    CLOUD_VENDOR: ec2

ec2 buster arm64 build:
  extends: .ec2 build
  variables:
    CLOUD_ARCH: arm64
    CLOUD_RELEASE: buster
    CLOUD_VENDOR: ec2

ec2 bullseye arm64 build:
  extends: .ec2 build
  variables:
    CLOUD_ARCH: arm64
    CLOUD_RELEASE: bullseye
    CLOUD_VENDOR: ec2

ec2 sid arm64 build:
  extends: .ec2 build
  variables:
    CLOUD_ARCH: arm64
    CLOUD_RELEASE: sid
    CLOUD_VENDOR: ec2

.gce build:
  extends: .build
  rules:
  - if: '$CI_MERGE_REQUEST_ID == null && $BUILD_GCE'
    when: on_success
  - if: '$CI_MERGE_REQUEST_ID == null'
    when: manual

gce stretch build:
  extends: .gce build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: stretch
    CLOUD_VENDOR: gce

gce buster build:
  extends: .gce build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: buster
    CLOUD_VENDOR: gce

gce bullseye build:
  extends: .gce build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: bullseye
    CLOUD_VENDOR: gce

gce sid build:
  extends: .gce build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: sid
    CLOUD_VENDOR: gce

.generic build:
  extends: .build
  rules:
  - if: '$CI_MERGE_REQUEST_ID == null && $BUILD_GENERIC'
    when: on_success
  - if: '$CI_MERGE_REQUEST_ID == null'
    when: manual

generic buster amd64 build:
  extends: .generic build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: buster
    CLOUD_VENDOR: generic

generic bullseye amd64 build:
  extends: .generic build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: bullseye
    CLOUD_VENDOR: generic

generic sid amd64 build:
  extends: .generic build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: sid
    CLOUD_VENDOR: generic

generic buster arm64 build:
  extends: .generic build
  variables:
    CLOUD_ARCH: arm64
    CLOUD_RELEASE: buster
    CLOUD_VENDOR: generic

generic bullseye arm64 build:
  extends: .generic build
  variables:
    CLOUD_ARCH: arm64
    CLOUD_RELEASE: bullseye
    CLOUD_VENDOR: generic

generic sid arm64 build:
  extends: .generic build
  variables:
    CLOUD_ARCH: arm64
    CLOUD_RELEASE: sid
    CLOUD_VENDOR: generic

generic buster ppc64el build:
  extends: .generic build
  variables:
    CLOUD_ARCH: ppc64el
    CLOUD_RELEASE: buster
    CLOUD_VENDOR: generic

generic bullseye ppc64el build:
  extends: .generic build
  variables:
    CLOUD_ARCH: ppc64el
    CLOUD_RELEASE: bullseye
    CLOUD_VENDOR: generic

generic sid ppc64el build:
  extends: .generic build
  variables:
    CLOUD_ARCH: ppc64el
    CLOUD_RELEASE: sid
    CLOUD_VENDOR: generic

genericcloud buster amd64 build:
  extends: .generic build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: buster
    CLOUD_VENDOR: genericcloud

genericcloud bullseye amd64 build:
  extends: .generic build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: bullseye
    CLOUD_VENDOR: genericcloud

genericcloud sid amd64 build:
  extends: .generic build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: sid
    CLOUD_VENDOR: genericcloud

octavia bullseye amd64 build:
  extends: .generic build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: bullseye
    CLOUD_VENDOR: octavia

.nocloud build:
  extends: .build
  rules:
  - if: '$CI_MERGE_REQUEST_ID == null && $BUILD_NOCLOUD'
    when: on_success
  - if: '$CI_MERGE_REQUEST_ID == null'
    when: manual

nocloud stretch amd64 build:
  extends: .nocloud build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: stretch
    CLOUD_VENDOR: nocloud

nocloud buster amd64 build:
  extends: .nocloud build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: buster
    CLOUD_VENDOR: nocloud

nocloud bullseye amd64 build:
  extends: .nocloud build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: bullseye
    CLOUD_VENDOR: nocloud

nocloud sid amd64 build:
  extends: .nocloud build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: sid
    CLOUD_VENDOR: nocloud

nocloud buster arm64 build:
  extends: .nocloud build
  variables:
    CLOUD_ARCH: arm64
    CLOUD_RELEASE: buster
    CLOUD_VENDOR: nocloud

nocloud bullseye arm64 build:
  extends: .nocloud build
  variables:
    CLOUD_ARCH: arm64
    CLOUD_RELEASE: bullseye
    CLOUD_VENDOR: nocloud

nocloud sid arm64 build:
  extends: .nocloud build
  variables:
    CLOUD_ARCH: arm64
    CLOUD_RELEASE: sid
    CLOUD_VENDOR: nocloud

nocloud buster ppc64el build:
  extends: .nocloud build
  variables:
    CLOUD_ARCH: ppc64el
    CLOUD_RELEASE: buster
    CLOUD_VENDOR: nocloud

nocloud bullseye ppc64el build:
  extends: .nocloud build
  variables:
    CLOUD_ARCH: ppc64el
    CLOUD_RELEASE: bullseye
    CLOUD_VENDOR: nocloud

nocloud sid ppc64el build:
  extends: .nocloud build
  variables:
    CLOUD_ARCH: ppc64el
    CLOUD_RELEASE: sid
    CLOUD_VENDOR: nocloud

####
# Provider uploads for developer pushs
####

azure upload:
  stage: vendor upload
  image: debian:buster
  script:
    - >
      ./bin/debian-cloud-images upload-azure
      --config-file "${CLOUD_UPLOAD_DEV_CONFIG}"
      *.build.json
  dependencies:
    - azure stretch build
    - azure stretch-backports build
    - azure buster build
    - azure buster-backports build
    - azure bullseye build
    - azure sid build
  artifacts:
    name: upload-azure
    expire_in: 7 days
    paths:
      - '*.upload-azure.json'
  rules:
  - if: '$CI_MERGE_REQUEST_ID == null && $CLOUD_UPLOAD_AZURE_DEV_ENABLED == "1" && $BUILD_AZURE'
    when: on_success
  - if: '$CI_MERGE_REQUEST_ID == null && $CLOUD_UPLOAD_AZURE_DEV_ENABLED == "1"'
    when: manual
  allow_failure: true

ec2 upload:
  stage: vendor upload
  image: debian:buster
  script:
    - >
      ./bin/debian-cloud-images upload-ec2
      --config-file "${CLOUD_UPLOAD_DEV_CONFIG}"
      *.build.json
  dependencies:
    - ec2 stretch amd64 build
    - ec2 buster amd64 build
    - ec2 bullseye amd64 build
    - ec2 sid amd64 build
    - ec2 stretch arm64 build
    - ec2 buster arm64 build
    - ec2 bullseye arm64 build
    - ec2 sid arm64 build
  artifacts:
    name: upload-ec2
    expire_in: 7 days
    paths:
      - '*.upload-ec2.json'
  rules:
  - if: '$CI_MERGE_REQUEST_ID == null && $CLOUD_UPLOAD_EC2_DEV_ENABLED == "1" && $BUILD_EC2'
    when: on_success
  - if: '$CI_MERGE_REQUEST_ID == null && $CLOUD_UPLOAD_EC2_DEV_ENABLED == "1"'
    when: manual
  allow_failure: true

gce upload:
  stage: vendor upload
  image: debian:buster
  script:
    - >
      ./bin/debian-cloud-images upload-gce
      --config-file "${CLOUD_UPLOAD_DEV_CONFIG}"
      *.build.json
  dependencies:
    - gce stretch build
    - gce buster build
    - gce bullseye build
    - gce sid build
  artifacts:
    name: upload-gce
    expire_in: 7 days
    paths:
      - '*.upload-gce.json'
  rules:
  - if: '$CI_MERGE_REQUEST_ID == null && $CLOUD_UPLOAD_GCE_DEV_ENABLED == "1" && $BUILD_GCE'
    when: on_success
  - if: '$CI_MERGE_REQUEST_ID == null && $CLOUD_UPLOAD_GCE_DEV_ENABLED == "1"'
    when: manual
  allow_failure: true
